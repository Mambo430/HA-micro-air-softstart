esphome:
  name: esphome-web-52afa0
  friendly_name: micro-air
  min_version: 2025.5.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "XXXX" #Enter your encryption key 

ota:
  - platform: esphome
    password: "XXXXXXXXX" #Enter your esphome password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Micro-Air Fallback Hotspot"
    password: "XXXXXXXX" #Enter your fallback password

captive_portal:

bluetooth_proxy:
  
esp32_ble_tracker:
  # Always keep scanning to detect when EasyStart comes online
  scan_parameters:
    interval: 1100ms
    window: 1000ms
    active: true
  # Add callback to detect when EasyStart appears
  on_ble_advertise:
    - mac_address: "C7:5B:B2:8E:D0:EC"
      then:
        - logger.log: "EasyStart detected - AC unit is powered on!"
        - logger.log: "Auto-starting connection to EasyStart..."
        - switch.turn_on: easystart_read

ble_client:
  - mac_address: "C7:5B:B2:8E:D0:EC" #Mac address of the EasyStart
    id: ble_client_1
    auto_connect: false  # Don't auto-connect, let our logic handle it
    # Add connection event handlers
    on_connect:
      then:
        - logger.log: "EasyStart connected successfully!"
        - binary_sensor.template.publish:
            id: easystart_connected
            state: ON
    on_disconnect:
      then:
        - logger.log: "EasyStart disconnected - AC may have powered off"
        - binary_sensor.template.publish:
            id: easystart_connected
            state: OFF

# Connection status sensor
binary_sensor:
  - platform: template
    name: "EasyStart Connected"
    id: easystart_connected
    
text_sensor:
  - platform: template
    name: "Status"
    id: status
            
sensor:
  - platform: template
    name: "Live Current"
    id: live_current_sen
    device_class: current
    state_class: measurement
    unit_of_measurement: "Amps"

  - platform: template
    name: "Line Frequency"
    id: line_frequency_sen
    device_class: frequency
    state_class: measurement
    unit_of_measurement: "Hz"

  - platform: template
    name: "Last Start Peak"
    id: last_start_peak_sen
    device_class: current
    state_class: total
    unit_of_measurement: "Amps"

  - platform: template
    name: "SCPT Delay"
    id: scpt_delay_sen
    unit_of_measurement: "Seconds"

  - platform: template
    name: "Total Faults"
    state_class: total
    id: total_faults_sen
    
  - platform: template
    name: "Total Starts"
    state_class: total
    id: total_starts_sen

  - platform: ble_client
    type: characteristic
    ble_client_id: ble_client_1
    service_uuid:        "d973f2e0-b19e-11e2-9e96-0800200c9a66"
    characteristic_uuid: "d973f2e1-b19e-11e2-9e96-0800200c9a66"
    name: "EasyStart Diag"
    update_interval: never
    notify: True
    lambda: |-

        std::vector<std::string> statusText = {
            "Normal",
            "Unexpected Curr Flt",
            "Short Cycle Delay",
            "Pwr Intrrptn Fault",
            "Stall Fault",
            "Stuck SR Fault",
            "Open Ovrld Fault",
            "Overcurrent Fault",
            "Bad Wiring Fault",
            "Wrong Voltage Flt"
        };
        
        uint8_t* data = (uint8_t*) x.data();
        size_t length = x.size();

        // Convert the response to a hexadecimal string
        std::string hex_str;
        for (size_t i = 0; i < length; ++i) {
            char buf[3];
            snprintf(buf, sizeof(buf), "%02X", data[i]);
            hex_str += buf;
        }

        // Check if the response contains the success message
        std::string response = std::string((char*)x.data(), x.size());
        if (response.find("{\"Sts\": Success}") != std::string::npos) {
            ESP_LOGD("ble_client", "Success Response: %s", response.c_str());
        } else {
            ESP_LOGD("ble_client", "Data Response (Hex): %s", hex_str.c_str());

            // Ensure there are enough bytes for extraction
            if (length >= 18) {
                float factor = 256.0;

                // Extract and log Live Current
                float live_current = ((data[4] & 0xFF) + ((data[5] & 0xFF) * factor)) / 10.0;
                ESP_LOGD("ble_client", "Live Current: %.1f", live_current);
                id(live_current_sen).publish_state(live_current);

                // Extract and log Line Frequency
                float line_frequency = 500000.0 / ((data[6] & 0xFF) + ((data[7] & 0xFF) * factor));
                ESP_LOGD("ble_client", "Line Frequency: %.1f", line_frequency);
                id(line_frequency_sen).publish_state(line_frequency);

                // Extract and log Last Start Peak
                float last_start_peak = ((data[8] & 0xFF) + ((data[9] & 0xFF) * factor)) / 10.0;
                ESP_LOGD("ble_client", "Last Start Peak: %.1f", last_start_peak);
                id(last_start_peak_sen).publish_state(last_start_peak);

                // Extract and log SCPT Delay
                uint16_t scpt_delay = (data[10] & 0xFF) + ((data[11] & 0xFF) * 256);
                ESP_LOGD("ble_client", "SCPT Delay: %u", scpt_delay);
                id(scpt_delay_sen).publish_state(scpt_delay);

                // Extract and log Total Faults
                uint16_t total_faults = (data[12] & 0xFF) + ((data[13] & 0xFF) * 256);
                ESP_LOGD("ble_client", "Total Faults: %u", total_faults);
                id(total_faults_sen).publish_state(total_faults);

                // Extract and log Total Starts
                uint32_t total_starts = data[14] + (data[15] << 8) + (data[16] << 16) + (data[17] << 24);
                ESP_LOGD("ble_client", "Total Starts: %u", total_starts);
                id(total_starts_sen).publish_state(total_starts);

                // Extract and log Status Text
                uint8_t status_index = data[2] & 0xFF;
                ESP_LOGD("ble_client", "Status: %u", status_index);
                std::string status_str;
                if (status_index < statusText.size()) {
                    status_str = statusText[status_index];
                } else {
                    status_str = "Unknown";
                }
                id(status).publish_state(status_str);

            } else {
                ESP_LOGD("ble_client", "Data Response is too short to extract all values");
            }
        }

        // Return a dummy value to comply with the lambda return type
        return (float)length;

switch:
  - platform: template
    id: easystart_read
    name: "Read Status"
    internal: true  # Hide this from Home Assistant UI
    turn_on_action: 
      then:
        - switch.template.publish:
            id: easystart_read
            state: ON
        - logger.log: "Starting EasyStart data collection..."
        # Don't stop scanning - keep it active to detect disconnections
        - ble_client.connect: ble_client_1
        - delay: 2s
        - while: 
            condition:
              and:
                - switch.is_on: easystart_read
                - binary_sensor.is_on: easystart_connected  # Stop if we lose connection
            then:
              - ble_client.ble_write:
                  id: ble_client_1
                  service_uuid: "d973f2e0-b19e-11e2-9e96-0800200c9a66"
                  characteristic_uuid: "d973f2e2-b19e-11e2-9e96-0800200c9a66"
                  value: [0x7B, 0x22, 0x43, 0x6D, 0x64, 0x22, 0x3A, 0x20, 0x52, 0x65, 0x61, 0x64, 0x4C, 0x69, 0x76, 0x65, 0x7D]
              - delay: 10s
        - logger.log: "Data collection stopped - disconnecting..."
        - delay: 2s
        - ble_client.disconnect: ble_client_1
    turn_off_action: 
      then:
        - switch.template.publish:
            id: easystart_read
            state: OFF
        - logger.log: "Read Status turned off manually"

button:
  - platform: template
    name: "Update Now"
    icon: "mdi:refresh"
    on_press:
      then:
        - logger.log: "Manual update requested - forcing fresh data read..."
        - if:
            condition:
              switch.is_on: easystart_read
            then:
              - logger.log: "Stopping current session for manual update..."
              - switch.turn_off: easystart_read
              - delay: 2s
        - logger.log: "Starting manual data collection..."
        - switch.turn_on: easystart_read

# Simplified reconnection logic - let BLE detection handle most cases
interval:
  - interval: 300s  # Check every 5 minutes for stuck states
    then:
      - if:
          condition:
            # If we think we're connected but switch got stuck off somehow
            and:
              - binary_sensor.is_on: easystart_connected
              - switch.is_off: easystart_read
          then:
            - logger.log: "Connection exists but reading stopped - restarting..."
            - switch.turn_on: easystart_read
